// URL du service d'agr√©gation du Dashboard
const DASHBOARD_API_URL = import.meta.env.VITE_API_DASHBOARD_URL;
// URL du service des R√©servations pour les donn√©es sp√©cifiques
const RESERVATIONS_API_URL = import.meta.env.VITE_API_RESERVATIONS_URL;

if (!DASHBOARD_API_URL || !RESERVATIONS_API_URL) {
  throw new Error("ERREUR: Les URLs du dashboard ou des r√©servations manquent dans le .env !");
}

/**
 * R√©cup√®re toutes les statistiques agr√©g√©es pour le dashboard.
 */
export const getDashboardStats = async () => {
  try {
    // üîÅ On r√©cup√®re les donn√©es g√©n√©rales, stats par succursale ET top 3 en parall√®le
    const [mainResponse, vehiculesBySuccursaleResponse, topSuccursalesResponse] = await Promise.all([
      fetch(`${DASHBOARD_API_URL}/dashboard-data`),
      fetch(`${DASHBOARD_API_URL}/vehicules-by-succursale`),
      fetch(`${DASHBOARD_API_URL}/top-succursales`) // üëà Ajout√© ici
    ]);

    if (!mainResponse.ok) throw new Error('Erreur de r√©cup√©ration des stats du dashboard.');
    if (!vehiculesBySuccursaleResponse.ok) throw new Error('Erreur stats v√©hicules par succursale.');
    if (!topSuccursalesResponse.ok) throw new Error('Erreur top succursales.');

    const mainData = await mainResponse.json();
    const vehiculesBySuccursale = await vehiculesBySuccursaleResponse.json();
    const topSuccursales = await topSuccursalesResponse.json(); // üëà Lecture ajout√©e

    // üëá DEBUG
    console.log("R√©ponse /dashboard-data :", mainData);
    console.log("R√©ponse /vehicules-by-succursale :", vehiculesBySuccursale);
    console.log("R√©ponse /top-succursales :", topSuccursales);

    return {
      ...mainData,
      vehiculesBySuccursale,
      topSuccursales // üëà Ajout√© dans le retour
    };

  } catch (error) {
    console.error("Erreur dans getDashboardStats:", error);
    return { 
      vehicules: { total: 0 }, 
      succursales: { count: 0 }, 
      reservationsActives: 0,
      utilisateurs: { total: 0 },
      vehiculesBySuccursale: [],
      topSuccursales: [] // üëà pour √©viter que React plante si la cl√© manque
    };
  }
};


/**
 * R√©cup√®re les r√©servations r√©centes pour le widget du dashboard.
 */
export const getRecentReservations = async () => {
  try {
    const response = await fetch(`${RESERVATIONS_API_URL}/stats/recent`);
    if (!response.ok) throw new Error('Erreur de r√©cup√©ration des r√©servations r√©centes.');
    const data = await response.json();
    return data.map(res => ({
      id: res.numeroreservation || res.idreservation,
      client: (res.Client && `${res.Client.prenom} ${res.Client.nom}`) || 'Client inconnu',
      vehicule: (res.Vehicule && `${res.Vehicule.marque} ${res.Vehicule.modele}`) || 'V√©hicule inconnu',
      statut: res.statut,
    }));
  } catch (error) {
    console.error("Erreur dans getRecentReservations:", error);
    return [];
  }
};

/**
 * R√©cup√®re les donn√©es d'√©volution mensuelle pour le graphique du dashboard.
 */
export const getMonthlyEvolution = async () => {
  try {
    const response = await fetch(`${RESERVATIONS_API_URL}/stats/monthly-evolution`);
    if (!response.ok) throw new Error('Erreur de r√©cup√©ration de l\'√©volution mensuelle.');
    return response.json();
  } catch (error) {
    console.error("Erreur dans getMonthlyEvolution:", error);
    return { labels: [], data: [] };
  }
};
